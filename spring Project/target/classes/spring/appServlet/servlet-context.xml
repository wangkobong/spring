<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	
	<!-- Spring MVC가 @controller에 요청을 보내기 위해 필요한 
		HandlerMapping과 HandlerAdapter를 Bean으로 등록함.
		
		(이 태그가 있어야 @RequestMapping 어노테이션이 사용 가능하다)
	-->
	<annotation-driven />
	
	
	<!-- 
		Handler Mapping 관련 설정이 xml 파일에 없는 이유 
	
		- Handler Mapping 관련 설정내용을 xml 형식으로 작성할 수 있지만
		  이를 대체할 수 있는 쉬운 어노테  이션이 있기 때문에 작성되어 있지 않음.
		 ** @Controller, @RequestMapping 두 어노테이션이 Handler Mapping 설정을 대체 
		 
	 -->
	
	<!-- 정적 자원 호출 경로 지정  -->
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- View Resolver
	
		Controller 메소드에서 반환된 View Name을 토대로
		연결할 View를 검색함.
		
		완성되는 경로의 형태
		[prefix] + 반환된 View Name + [suffix]
		/WEB-INF/views/ + home    +  .jsp
		
		-> 해당 경로로 forward됨
	  -->
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />	
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- Bean Scanning 
		지정된 패키지 내에 있는 @Component 또는 구체화 요소(@Controller, @Service, @Repository)
		들을 스캔을 해서 Bean으로 등록하는 태그.
		
		Bean == 스프링 컨테이너가 만든 객체
		
		Bean을 등록했다
		== 스프링 컨테이너가 제어할 수 있다. (IOC)
		== 스프링 컨테이너가 객체가 필요한 부분에 알아서 주입을 시켜준다.
			(개발자가 객체 생성을 신경쓰지 않고 해당 내용을 스프링에 의존하여 주입한다(DI))
		
	-->
	<context:component-scan base-package="com.kh.spring" />
	
	<!-- Spring AOP -->
	<!-- Namespaces에서 aop를 체크하는 것이 우선임. -->
	<aop:aspectj-autoproxy/>
	<!-- @Aspect 어노테이션이 작성된 클래스를 자동적으로 
		Target Object의 Proxy로 설정 -->	
	
	
	
</beans:beans>
